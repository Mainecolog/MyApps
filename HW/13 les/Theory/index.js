// ООП (объектно-ориентированное программирование)
// Современным методом создания объектов является class! 


//  В основе програмирования - объекты
// 1. function
// 2. class

// 1. Создание объектов при помощи Функции:
// function Animal (name){
//     this.name = name;
//     this.getName = function() {
//         return this.name
//     }
// };
// // Чтобы создать оюъект нужно добавить ключевое слово "new"
// const cat = new Animal(`cat`)
// console.log(`cat: `,cat);
// console.log(cat.name);
// console.log(cat.getName());

// 2. Class. МЕТОДЫ = функции в классах. Все сущности в классах - значения (параметры типа name) = это ПОЛЯ
class Animal /*название класса*/ {
    constructor (name/* params */) { // constructor - функция, инициализирующая начальные параметры
        this.name = name; // ПОЛЕ
    }
    getName () {
        return this.name; // МЕТОД
    }
};
const cat = new Animal(`cat`);
const dog = new Animal(`dog`);
console.log(dog);
// console.log(`cat: `,cat);
// console.log(cat.name);
// console.log(cat.getName());


//   ТЕОРИЯ ИЗ КУРСА
// В данном уроке мы разберемся, что такое классы в JavaScript, узнаем зачем они нужны, как их создавать и использовать. Узнаем, что такое ООП (объектно-ориентированное программирование) и узнаем о принципах ООП.

// Классы

// В предыдущих уроках мы уже научились создавать объекты с помощью фигурных скобок { ... }. Данный способ удобен, когда нам нужен какой-то конкретный объект, непохожий на остальные. Но что, если нам нужно создать множество таких однотипных объектов как, например, пользователи или товары магазина? Если мы будем пользоваться лишь фигурными скобками, во-первых, программирование превратится в рутину, что не так страшно. Во-вторых, что намного страшнее, когда проект разрастется, код будет сложно контролировать и мы получим множество проблем. Как этого избежать? Здесь нам на помощь приходят классы.

// Что такое класс?

// Класс – это шаблон кода для создания объектов – экземпляров класса (instance). В классе устанавливаются начальные значения (свойства) и поведение (методы). Значения свойств мы можем либо передавать в качестве параметров либо присваивать им конкретные значения в самом классе.


// Представим, что наземные млекопитающие – это класс. У каждого из них есть четыре конечности, два глаза, каждому из них нужно питаться – это свойства с конкретными значениями, они общие для всех объектов. Также животные могут быть домашними или дикими, травоядными или хищниками, ходить на четырех лапах или на двух – это свойства со значениями, которые задаются конкретному объекту. А такие действия, как поспать, поесть, побежать – это методы.

// Создание класса с помощью функции-конструктора

// Один из способов создать класс – функция или, вернее, функция-конструктор. Это обычные функции, но с двумя соглашениями:

// Имя функции-конструктора должно быть с заглавной буквы.
// Функция-конструктор должна вызываться с помощью оператора new.
// Создание и вызов функции-конструктора выглядит следующим образом:

// // Класс через функцию-конструктор
// function Class(значениеСвойства) {
//   this.названиеСвойства = значениеСвойства;
//   this.названиеМетода = function() { /* ... */ };
// };

// // Создание экземпляра класса
// const obj = new Class(переданноеЗначение);
// Когда вызывается подобная функция, происходит следующее:

// Создается пустой объект, который присваивается в this.
// В this добавляются свойства и методы, которые мы задали в теле функции.
// Возвращается итоговый объект this.
// Посмотрим на конкретный пример:

// function Pet(type, name) {
//   this.type = type;
//   this.name = name;
//   this.favoriteAction = 'спать';
//   this.say = function() {
//     console.log(`${this.type} по имени ${this.name} любит ${this.favoriteAction}.`);
//   };
// };

// const cat = new Pet('Кот', 'Барсик');

// console.log(cat);
// // Pet {type: 'Кот', name: 'Барсик', favoriteAction: 'спать', say: ƒ}

// cat.say();
// // Кот по имени Барсик любит спать.
// В данном примере мы создали класс для домашних питомцев, в котором есть:

// Свойство type, значением которого могут быть, например, 'кот'/'кошка', 'пес'/'собака'.
// Свойство name с именем питомца.
// Свойство favoriteAction – любимое действие питомца, с заранее заданным значением 'спать'. Кто не любит спать?
// Метод say(), с помощью которого выводится информация о питомце.

// Данный способ создания классов не всегда удобно использовать – нужно писать больше кода. В ES6 появился новый синтаксис классов, который позволяет более удобно и понятно их создавать. Но это совсем не значит, что тебе не нужно знать о функциях-конструкторах и что мы зря сейчас это изучали.

// Во-первых, следующий способ создания классов похож на тот, что мы рассмотрели выше.

// Во-вторых, в разработке и по сей день также используется этот подход, так как технологии развиваются стремительно, а на обновление кода требуется время. Плюс в редких случаях подход через функции-конструкторы может дать больше возможностей, чем синтаксис классов. Поэтому в работе ты, вероятно, можешь столкнуться с подобным кодом. И чтобы ты не вошел в ступор, тебе стоит знать оба способа.

// Ну а теперь перейдем к новому синтаксису современного JavaScript – class.

// Создание класса с помощью ключевого слова class

// class – это современный способ для создания классов в JavaScript. Хоть на первый взгляд и может показаться, что class – это что-то принципиально новое, на деле это всего лишь разновидность функции. В этом мы можем убедиться с помощью оператора typeof:

// class Class {};
// console.log('type of Class:', typeof Class); // type of Class: function
// Итак, мы убедились, что у class тип function.

// В случае с class действуют те же правила, что и с функцией-конструктором:

// Имя должно быть с заглавной буквы.
// Вызов происходит с помощью оператора new.
// Теперь посмотрим на его синтаксис:

// // Определение класса
// class Class {
//   constructor(значениеСвойства) {
//     this.названиеСвойства = значениеСвойства;
//   }
//   названиеМетода1() {}
//   названиеМетода2() {}
// }

// // Создание экземпляра класса
// const obj = new Class(переданноеЗначение);
// Итак, новый класс создается следующим образом:

// Прописывается ключевое слово class и название класса с заглавной буквы. При этом, круглые скобки после названия не ставятся.
// В теле прописывается метод constructor(), внутри которого мы прописываем нужные свойства и действия, необходимые при создании экземпляра класса. В круглых скобках принимаем параметры, если в этом есть необходимость.
// Также в теле прописываются необходимые методы.
// При вызове класса через оператор new аргументы в круглых скобках передадутся в constructor().

// Также, обрати внимание, что между методами класса запятая не ставится. Если написать между ними запятую, это приведет к синтаксической ошибке!

// Теперь посмотрим на конкретный пример работы с class:

// class Pet {
//   constructor(type, name) {
//     this.type = type;
//     this.name = name;
//     this.favoriteAction = 'спать';
//   }
//   say() {
//     console.log(`${this.type} по имени ${this.name} любит ${this.favoriteAction}.`);
//   }
// };

// const cat = new Pet('Кот', 'Барсик');

// console.log(cat);
// // Pet {type: 'Кот', name: 'Барсик', favoriteAction: 'спать'}

// cat.say();
// // Кот по имени Барсик любит спать.
// В данном случае мы переписали прошлый пример с функцией-конструктором на синтаксис class и получили тот же желаемый результат.

// Также у class есть свои особенности. Например:

// class нельзя вызвать без оператора new. Если попытаться это сделать, то мы получим ошибку:
// class Class {};
// Class();
// // Uncaught TypeError: Class constructor Class cannot be invoked without 'new'
// Вывод класса в консоль начинается с 'class...', что открывает возможности для его отслеживания:
// class Class {};
// console.log(Class); // class Class {}
// Таким образом, class имеет свои особенности, он является более читабельным и современным способом создания классов.