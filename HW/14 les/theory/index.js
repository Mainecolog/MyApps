// // Устаревшие способы получения HTML елементов:

// getElementById()
// getElementsclassName()
// getElementsTagName()

// Современные способы:
// querySelector - 
const tasksBlock = document.querySelector(`#main`); // Если ID , то решетку //  символ решетки # перед идентификатором искомого элемента. Это селектор по идентификатору.
console.log(tasksBlock);
const textBlock = document.querySelector(`.text`); // Если класс, то ставим точку //  символ решетки # перед идентификатором искомого элемента. Это селектор по идентификатору.
console.log(textBlock);

// получение с помощью Тега
const firstButton = document.querySelector(`nameOfFirstButton`); // Найдет только первый по порядку искомый элемент.
const thirdButton = document.querySelector(`[nameOfThirdButton-id='3']`); // Найдет третий по порядку искомый элемент. 
// Также в селекторе по атрибуту можно не указывать значение атрибута, тогда будут найдены все элементы с этим атрибутом:
// В этом примере будет найден первый элемент, имеющий атрибут data-id с любым значением.
// Если такого порядгового номера не существует, то выведет Null

//querySelectorAll - найдет все элементы по данному селектору
// const allTextBlock = document.querySelectorAll(`.text`);
// console.log(allTextBlock); //NodeList(2) [p.text, p.text] - массив из двух элементов 
// allTextBlock.forEach((text, index)=>{
//     console.log(text,index);// <p class=​"text" data-id=​"2">Первый абзац​</p>​ 0
//                             // <p class=​"text" data-id=​"2">​Второй абзац​</p>​ 1
// });


// Все эти селекторы работают и с другими HTML элементами
const createBlock = document.querySelector(`create`);
const submitButton = createBlock.querySelector(`[type='submit']`);
// Это оптимизация. Мы сокращаем путь поиска. (DOM - дерево)



// // Что такое DOM-дерево

// DOM (Document Object Model) — объектная модель документа. Это технология, позволяющая представить веб-страницу в виде дерева объектов. Каждый тег HTML в этом дереве представлен в виде отдельного объекта.

// Для наглядности, возьмём простой HTML-документ:

// <!DOCTYPE html>
// <html>
//     <head>
//         <title>Пример документа</title>
//     </head>
//     <body>
//         <div>
//             <p>Первый абзац</p>
//             <p>Второй абзац</p>
//         </div>
//     </body>
// </html>
// Его содержимое можно представить в виде дерева:


// Это и есть DOM-дерево, то есть дерево объектов веб-страницы. В JavaScript есть множество методов для работы с DOM-деревом и его элементами. Эти методы позволяют делать страницы более динамичными, добавляя или изменяя элементы страницы “на лету”.

// Получение элементов DOM

// Немного дополним HTML-документ из примера выше. Добавим в него атрибуты элементов и подключим скрипт index.js, в котором будем тестировать методы работы с DOM:

// <!DOCTYPE html>
// <html>
//     <head>
//         <title>Пример документа</title>
//     </head>
//     <body>
//         <div id="main">
//             <p class="text" data-id="1">Первый абзац</p>
//             <p class="text" data-id="2">Второй абзац</p>
//         </div>
//         <script src="index.js"></script>
//     </body>
// </html>
// Рассмотрим на примере этого HTML-документа работу основных методов получения DOM-элементов. Каждый HTML-элемент имеет следующие методы для этого:

// getElementById()
// getElementsByClassName()
// getElementsByTagName()
// querySelector()
// querySelectorAll()
// Для поиска по всему документу эти методы вызываются через объект document, например document.getElementById("main"). Рассмотрим каждый из этих методов подробнее.

// getElementById()

// Итак, первый метод getElementById(). Позволяет получить элемент по идентификатору, то есть по значению атрибута id. Попробуем получить элемент <div> с помощью этого метода:

// const div = document.getElementById("main");
// Результат вывода этого элемента в консоль:


// Как видно, полученный элемент включает также все дочерние элементы.

// getElementsByClassName()

// Следующий метод getElementsByClassName(). Позволяет получать элементы по названию класса.

// Найдем все элементы с классом text в нашем документе:

// const paragraphs = document.getElementsByClassName("text");
// Вывод в консоль показывает, что метод вернул коллекцию из двух элементов:


// getElementsByTagName()

// Метод getElementsByTagName() находит все элементы по названию тега.

// Найдем с помощью этого метода все элементы <p> в нашем документе:

// const paragraphs = document.getElementsByTagName("p");
// Результат вывода в консоль будет аналогичным результату работы метода getElementsByClassName(), так как все элементы <p> у нас имеют класс text:


// querySelector()

// Помимо рассмотренных методов получения DOM-элементов, есть более современный и универсальный способ — метод querySelector(). С помощью этого одного метода можно получать элементы разными способами — по идентификатору, классу, названию тега или значению атрибута.

// По сути, метод querySelector() ищет первый элемент в дереве по заданному CSS-селектору.

// Получим с помощью querySelector() те же элементы из примера, которые мы находили ранее.

// Поиск по идентификатору:
// const div = document.querySelector("#main");
// Обрати внимание на символ решетки # перед идентификатором искомого элемента. Это селектор по идентификатору.

// Убедимся, что выведен тот же элемент, который был получен с помощью getElementById():


// Поиск по классу:
// const paragraph = document.querySelector(".text");
// Точка перед названием класса представляет собой селектор по классу.

// Выведем результат в консоль:


// При выводе результата проявилась важная особенность работы метода querySelector() — он получает только первый результат из выборки. Для вывода всех элементов используется метод querySelectorAll(), который мы рассмотрим далее.

// Поиск по тегу (типу элемента):
// const paragraph = document.querySelector("p");
// Селектор по типу не требует дополнительных символов перед названием типа.

// Здесь также будет получен только первый абзац, как и при получении по классу.

// Поиск по значению атрибута:
// const paragraph = document.querySelector("[data-id='2']");
// Селектор по атрибуту включает в себя название и значение атрибута, заключенные в квадратные скобки.

// Здесь будет получен второй абзац, который имеет атрибут data-id="2":


// Также в селекторе по атрибуту можно не указывать значение атрибута, тогда будут найдены все элементы с этим атрибутом:

// В этом примере будет найден первый элемент, имеющий атрибут data-id с любым значением.

// Комбинированный поиск по селектору:
// const elements = document.querySelector("#main p.text");
// В этом примере осуществляется поиск всех элементов p с классом text, вложенных внутрь элемента с идентификатором #main. Пробел указывает на поиск по потомкам (селектор потомков).

// querySelectorAll()

// Для получения всех элементов по заданному условию используется метод querySelectorAll(). Он работает аналогичным образом, как и метод querySelector(), разница только в количестве возвращаемых элементов.

// Для примера, получим все элементы <p>:

// Вывод в консоль покажет, что найдены два элемента:

// // 