// 1.SPLICE, 
// 2.SLICE;
// 3.INDEXOF;
// 4.INCLUDES; 
// 5.SPLIT; 
// 6.JOIN;
// 7.REVERSE;


//  .SPLICE ИЗМЕНЯЕТ ТЕКУЩИЙ МАССИВ, не возвращает новый

// Удаляет элементы массива, а на их место вставляет другие
// .splice ( 1. index с которогог пойдет удаление; 2.количесвто удаляемых элементов; 3. на что будем заменять удаленные)
const cars = [`bmw`,`mercedes`,`lada`];
cars.splice(0,2,`Audi`,`Bugatti`);
console.log(`cars`,cars);
//.splice ВОЗВРАЩАЕТ УДАЛЕННЫЕ элементы:

const removedCars= cars.splice (0,2,`Audi`,`Bugatti`);
console.log(`removedCars`,removedCars);

// .SLICE. НЕ ИЗМЕНЯЕТ ТЕКУЩИЙ МАССИВ! ВОЗВРАЩАЕТ НОВЫЙ МАССИВ. Нельзя передать аргументы взамен удаленных
// .slice( 1. Индекс, с которого начнем обрезать массив; 2.Индекс, на котором обрезку окончим)

const agesOfDevelopers = [25,18,45,30];
const slicedAgesOfDevelopers = agesOfDevelopers.slice(0, 2);

console.log(`slicedAgesOfDevelopers`, slicedAgesOfDevelopers);
console.log(`agesOfDevelopers`,agesOfDevelopers);

// indexOf 
// .indexOf(1. Искомый элемент)
const favoriteFood = [`IceCram`,`Coffee`, `-1`];
const indexOfFood = favoriteFood.indexOf(`-1`);
console.log(`indexOfFood`,indexOfFood);

// includes 
// ВОзвращает TRUE or FALSE. Существует ли элемент в массиве.
// . includes(1. Искомый элемент)
const tecnologies = [`JavaScript`, `HTML`, `CSS`];
const tecEx = tecnologies.includes(`CSS`)
console.log(`tecEx`,tecEx);

// SPLIT + JOIN

// SPLIT - ИЗ СТРОЧКИ В МАССИВ!
// .SPLIT(`1. Разделитель(по какому символу разбивать будем)`)
const listOfOrders = `Майка, шорты, кроссовки, рюкзак`;
const lOOArray = listOfOrders.split(`, `);
console.log(`lOOArray`,lOOArray);

// JOIN - ИЗ МАССИВА В СТРОЧКУ!
// .JOIN(`1. РАЗДЕЛИТЕЛЬ, КОТОРЫЙ ХОТИМ ОТОБРАЖАТЬ В СТРОЧКУ`)
const ordersString = lOOArray.join(`, `)
console.log(`ordersString:`,ordersString);

// REVERSE - ПЕРЕВОРАЧИВАЕТ НАШ МАССИВ.  
// Изменяет массив, не создает новый.
tecnologies.reverse();
console.log(`tecnologies`,tecnologies);

// Метод splice()

// Данный элемент удаляет элементы из массива и, если это необходимо, заменяет их другими данными.


// Метод splice() принимает в себя несколько параметров:

// Индекс элемента, с которого нужно начать удаление.
// Количество элементов, которые нужно удалить.
// Данные, которыми нужно заменить удаленные элементы. Этот параметр является необязательным. Можно передать несколько через запятую.
// Давай посмотрим, как он работает:

// const array = [1, 3, 5, 7, 9, 11];
// array.splice(1, 3, 2, 2);
// console.log('array:', array); // [1, 2, 2, 9, 11]

// Таким образом мы удалили три элемента, начиная с элемента под индексом 1, а на их место поставили 2 числа 2. При этом, индексы остальных элементов сместились. В данном случае число 9 было по индексу 4, после преобразования ее индекс изменился на 3. А индекс числа 11 изменился с 5 на 4.


// const array = [1, 3, 5, 7, 9, 11];
// const deletedValues = array.splice(0, 3);
// console.log('deleted values: ', deletedValues); // [1, 3, 5]
// console.log('array: ', array); // [7, 9, 11]

// В данном примере мы удалили три первых элемента массива и присвоили их переменной deletedValues.

// Метод slice()

// Данный метод немного похож на предыдущий, но у него есть свои особенности:

// Он не изменяет массив, а лишь извлекает и возвращает необходимые нам элементы.
// И, соответственно, с помощью него нельзя заменить извлеченные элементы.

// В качестве параметров он принимает индекс элемента, с которого нужно начать извлечение и количество элементов, которые нужно извлечь.

// Посмотрим как он работает:

// const array = [1, 3, 5, 7, 9, 11];
// const slicedValues = array.slice(0, 3);
// console.log('sliced values: ', slicedValues); // [1, 3, 5]
// console.log('array: ', array); // [1, 3, 5, 7, 9, 11]

// Как можно увидеть, в результате мы получили переменную с извлеченными элементами массива. Сам же массив остался прежним.

// Метод indexOf()

// Данный метод возвращает индекс искомого элемента массива. Если такого элемента не существует, он вернет значение -1.


// Проверим его в действии:

// const array = ['one', 'two', 'three'];
// console.log('index: ', array.indexOf('two')); // 1
// console.log('index: ', array.indexOf('four')); // -1

// В первом случае мы искали строку 'two'. Метод indexOf() нашел ее и вернул индекс данного элемента - 1.

// Во втором случае он вернул значение -1, так как строки 'four' в массиве нет.

// Также стоит отметить, что indexOf() ищет индекс первого элемента, подходящего под условие.

// Убедимся на примере:

// const array = [1, 1, 2, 3, 3, 2, 4];
// console.log('index: ', array.indexOf(2)); // 2

// Как можно увидеть, indexOf() вернул индекс первого подходящего элемента и завершил работу.

// Метод indexOf() отличается от метода findIndex() следующим:

// В метод findIndex() мы передаем функцию, в которой прописываем любое условие, на основе которого ищем подходящий нам элемент. В indexOf() же мы передаем значение, которое будем сравнивать с каждым элементом массива, пока не найдем подходящий элемент.

// Метод includes()

// Данный метод проверяет, содержится ли искомый элемент в массиве или нет. Если содержится, то вернется значение true, иначе - false.


// Посмотрим, как он работает:

// const array = ['coffee', 'tea', 'coca-cola', 'mirinda'];
// console.log('includes: ', array.includes('tea')); // true
// console.log('includes: ', array.includes('sprite')); // false

// В первом случае вернулось значение true, так как строка 'tea' в массиве присутствует.

// Во втором случае вернулось false, так как строки 'sprite' метод includes() не обнаружил.

// Метод split() и метод join()

// Метод split() разбивает строку на массив строк.


// Метод join() объединяет все элементы массива в строку.


// Давай посмотрим как работает метод split():

// const items = 'Coffee, Cake, Water';
// console.log('items array: ', items.split()); 
// // ['Coffee, Cake, Water']

// Получился массив, состоящий из одного элемента в виде нашей строки. Не такого результата мы ожидали.

// Для того, чтобы разбить строку на несколько элементов, нам необходимо передать в метод split() строку - разделитель, по которому нужно разбить ее на отдельные строки. В нашем случае - это ', ':

// const items = 'Coffee, Cake, Water';
// console.log('items array: ', items.split(', ')); 
// // ['Coffee', 'Cake', 'Water']

// Отлично! Строка разбилась на три строчных элемента.

// А что если мы захотим собрать все это обратно в строку?

// Давай попробуем это сделать с помощью метода join():

// const itemsArray = ['Coffee', 'Cake', 'Water'];
// console.log('items string: ', itemsArray.join()); 
// // 'Coffee,Cake,Water'

// Получилось не очень красиво. Метод join() склеивает элементы, разделяя их запятой без пробелов.

// Попробуем методу join() тоже задать свой разделитель - ', ':

// const itemsArray = ['Coffee', 'Cake', 'Water'];
// console.log('items string: ', itemsArray.join(', ')); 
// // 'Coffee, Cake, Water'

// Идеально! Элементы нашего массива склеились в красивую строку.

// Если же между элементами разделитель не нужен, тогда в метод join() нужно передать пустую строку:

// const array = ['Java', 'Script'];
// console.log(array.join(''));

// В итоге мы склеили два элемента без разделителя между ними.

// Метод join(), также, может склеивать не только строчные элементы:

// const array = [1, 2, 3, 4, 5, 6];
// console.log('array string: ', array.join(' ')); // '1 2 3 4 5 6'

// В данном примере мы склеили числовые значения и добавили пробел в качестве разделителя.