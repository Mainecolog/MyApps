// СОРТИРОВКА МАССИВА. .SORT()/ Не возвращает нового массива, а изменяет текущий!!
// В "Колбэке" 2 параметра "a" и "b". 
// Если "а-б", то сортирует по возрастанию 
// т.е. от первого элемента, отнимается второй,
// если разность отрицательная (<0), то переходит к сортировке следующих элементов

// Если "б-а", то сортирует по убыванию,
// т.е. разность положительная, то идем дальше, если нет, 
// то сортируем пока не "b-a  >0 = true" 

// <0
// >0
// =0
// const salariesOfDevelopers = [400, 500, 600, 2000, 350];
// salariesOfDevelopers.sort((a,b) =>
// {
// return  a-b;
// });
// console.log(salariesOfDevelopers);

//!!!!!!!Если вызвать .sort без колбека "(()){};", то!!!!!!!!!!
// salariesOfDevelopers.sort() будет работать, как сортировка по строкам по возрастанию!,
// т.е. будет сравнивать все элементы приводя к .string

// Контрорлируем сортировку строк:
// !!!!!!!ПО УБЫВАНИЮ:
// const developerNames = [ `Maxim`,`Igor`, `Nastya`,`Irina`];
// developerNames.sort((a, b) =>
// { 
//     if (a > b) 
//     {
//         // т.е. первый элемент больше второго, т.е. надо делать перестановку 
//         return 1;
//     }
//         // т.е. первый элемент меньше второго, т.е. не надо делать перестановку 
//     if (a < b) 
//     {
//         return -1;
//     }
//      return 0;
// });
// console.log(`developerNames`, developerNames);

// !!!!!!ПО вОЗРАСТАНИЮ:
const developerNames = [ `Maxim`,`Igor`, `Nastya`,`Irina`];
developerNames.sort((a, b) =>
{ 
    if (a < b) 
    {
        // т.е. первый элемент меньше второго, т.е. надо делать перестановку 
        return 1;
    }
        // т.е. первый элемент больше второго, т.е. не надо делать перестановку 

    if (a > b) 
    {
        return -1;
    }
     return 0;
});
console.log(`developerNames`, developerNames);

// Чтобы отсортировать массив по числам, то обязателен колбэк!

// ИНФОРМАЦИЯ С ПОРТАЛА:
// Данный метод сортирует элементы массива по возрастанию, либо по убыванию.

// Посмотрим, как он отсортирует строки:

// const array = ['b', 'd', 'c', 'a', 'e', 'f', 'g'];
// console.log(array.sort()); // ['a', 'b', 'c', 'd', 'e', 'f', 'g']

// В результате мы получили массив отсортированный по алфавиту.

// Но что если нам нужно отсортировать его в обратном порядке?

// В таком случае, нам необходимо передать в метод sort() функцию-callback с двумя параметрами. Каждый параметр в качестве значения будет принимать элемент массива:

// const array = ['b', 'd', 'c', 'a', 'e', 'f', 'g'];
// array.sort((a, b) => {
//   console.log(`a: ${a}, b: ${b}`)
// });

// Как можно увидеть, метод sort() каждый раз берет пару соседних элементов.

// В теле функции мы будем их сравнивать и на основе этого производить сортировку.

// Метод sort() работает по следующему принципу:

// sort() должен вернуть значение меньше нуля, равное нулю или больше нуля.
// Если вернется значение меньше нуля, сортировка поставит a по меньшему индексу, чем b, то есть, a будет идти первым.
// Если вернется значение больше нуля, сортировка поставит b по меньшему индексу, чем a, то есть, b будет идти первым.
// Если вернётся значение равное нулю, сортировка оставит a и b неизменными по отношению друг к другу.
// Давайте организуем сортировку в обратном порядке:

// const array = ['b', 'd', 'c', 'a', 'e', 'f', 'g'];
// array.sort((a, b) => {
//   if (a < b) {
//     return 1;
//   }
//   if (a > b) {
//     return -1;
//   }
//   return 0;
// });
// console.log(array); // ['g', 'f', 'e', 'd', 'c', 'b', 'a']

// Таким образом, мы отсортировали элементы массива в обратном порядке.

// Если говорить о сортировке чисел, то с ними все проще:

// const array = [2, 4, 1, 3, 7, 6, 5];
// array.sort((a, b) => {
//   return a - b;
// });
// console.log(array); // [1, 2, 3, 4, 5, 6, 7]

// Метод sort() работает все по тому же принципу. Функция вернет число, которое может быть больше нуля, меньше нуля или равное нулю. Если вернется значение меньше нуля, тогда сортировка поставит a перед b. Если больше нуля, то наоборот. А если вернется значение, равное нулю, числа останутся на своих местах. В результате он отсортировал наш массив по возрастанию.

// Разберем как он действует на примере первых элементов: 

// Сперва переменной a присвоится значение 4, а переменной b - значение 2. a - b (4 - 2) в таком случае будет равно 2 - положительное значение. Следовательно, b со значением 2 будет идти раньше, чем a.
// Дальше переменной a присвоится значение 1, а переменной b - значение 4. В этом случае a - b (1 - 4) будет равно -3 - отрицательное значение. Следовательно, a будет идти раньше, чем b.
// Теперь метод sort() видит, что первые элементы, которые он перебирал, до сих пор не идут в том порядке, который нужен (Сейчас порядок такой: 2, 1, 4,...). Тогда он присваивает переменной a значение 1, а переменной b - значение 2. В таком случае a - b будет равно -1 - отрицательное значение. Соответственно, a будет идти раньше b. В итоге порядок будет такой: 1, 2, 4,....
// Далее он перейдет к следующим элементам и будет сортировать их по такой же схеме.
// Чтобы отсортировать этот же массив по убыванию, достаточно поменять переменные местами. В таком случае положительные значения, которые мы получали в прошлом примере, станут отрицательными, а отрицательные - положительными:

// const array = [2, 4, 1, 3, 7, 6, 5];
// array.sort((a, b) => {
//   return b - a;
// });
// console.log(array); // [7, 6, 5, 4, 3, 2, 1]

// Массив отсортирован в порядке убывания.

// Снова разберем как он действует на примере первых элементов:

// Сперва переменной a присвоится значение 4, а переменной b - значение 2. b - a (2 - 4) в таком случае будет равно -2 - отрицательное значение. Следовательно, a со значением 4 будет идти раньше, чем b.
// Дальше переменной a присвоится значение 1, а переменной b - значение 4. В этом случае b - a (4 - 1) будет равно 3 - положительное значение. Следовательно, b будет идти раньше, чем a. Сейчас порядок следующий: 4, 2, 1,....
// Далее он перейдет к следующим элементам и будет сортировать их по такой же схеме.