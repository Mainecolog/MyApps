/*
Async и await

В этом уроке мы рассмотрим ещё один подход работы с асинхронным кодом в JavaScript — с помощью ключевых слов async и await.

Ключевое слово async
Ключевое слово async позволяет удобным способом создавать асинхронные функции. Такие функции всегда возвращают объект Promise.
Значения других типов оборачиваются в промис автоматически. Пример асинхронной функции:*/

async function sum() {
  return 2 + 2;
};
// Функция выше аналогична следующей функции с обычным промисом:
function sum() {
  return new Promise((resolve, reject) => {
    resolve(2 + 2);
  });
}
// Поскольку асинхронная функция всегда возвращает промис, для обработки результата используется конструкция then:
sum().then(result => {
  console.log(result); // Выведет 4
});

// Для стрелочных функий синтаксис немного отличается, ключевое слово async ставится перед списком параметров:
const sum = async () => {
  return 2 + 2;
}
// Таким образом, ключевое слово async перед функцией гарантирует, что эта функция вернёт промис.


// Рассмотрим другое ключевое слово — await. 
/*Ключевое слово await используется, чтобы дождаться выполнения асинхронной операции справа от await и вернуть его результат:

const result = await promise;
Например, в следующем примере с помощью await мы ждем результат промиса и выводим его в консоль:*/

async function test() {
  const promise = new Promise(resolve => {
    setTimeout(() => resolve("Успех"), 1000);
  });
  const result = await promise;
  console.log(result);
}

test(); // "Успех"
// Результат будет выведен в консоль только после выполнения промиса через 1 секунду.

// Аналогичный результат можно получить и с помощью Promise.then(), однако await позволяет получить результат промиса более компактным и наглядным способом.

// Обработка ошибок

// Обработать ошибки внутри async функций можно двумя способами:

// С помощью блоков try/catch внутри самой функции.
// С помощью метода Promise.catch() на верхнем уровне при обработке результата функции.
// Первый способ:

async function getData() {
  try {
    const result = await promise;
    return result;
  }
  catch(error) {
    console.error("Ошибка! " + error);
  }
}
// Второй способ:

async function getData() {
  const result = await promise;
  return result;
}

getData()
  .then(result => {
    // Обработка результата
  })
  .catch(error => {
    console.error("Ошибка! " + error);
  });
//   Во втором случае async функция при ошибке вернёт промис со статусом rejected, поэтому нужно обработать его с помощью метода catch().