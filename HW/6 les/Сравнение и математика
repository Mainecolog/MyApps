JavaScript, как и любой другой язык программирования, позволяет работать с математикой (целые / дробные числа, арифметические операторы, операторы сравнения и тд). Она часто используется при разработке различных программ. 

Например, нам нужно выполнить конвертацию между двумя валютами. Здесь мы должны использовать оператор деления и умножения. Давай начнем с самых основ и затем реализуем свой мини-конвертер валют. 

Математические операции

Операторы имеют свой приоритет при выполнении (например, сначала будет выполнятся умножение, а только затем сложение). Полную таблицу приоритетов ты можешь найти здесь. 

JavaScript позволяет работать со следующими арифметическими операторами:

+ – сложение
console.log(39 + 3) // 42
- – вычитание
console.log(52 - 10) // 42
console.log(5 - (2 + 1)) // 5 - 3 = 2
* – умножение
console.log(2 * 21) // 42
console.log(1 + 2 * 3) // 1 + 6 = 7
/ – деление
console.log(126 / 3) // 42
console.log(4 + 4 / 2) // 4 + 2 = 6
** – возведение в степень
console.log(3 ** 3) // 3^3 = 3 * 3 * 3 = 27
console.log(5 ** 2) // 5^2 = 5 * 5 = 25
% – остаток от деления. Результатом a % b будет остаток от целочисленного деления a на b
console.log(9 % 2) // 1
console.log(8 % 3) // 2

Сложение/вычитание с присвоением 

Довольно часто бывает ситуация, когда нам нужно изменить переменную, произведя с ней какое-то действие. Разумеется, что мы можем сделать так:

let a = 1;
a = a + 1;
console.log(a); // 2
Но также мы можем воспользоваться сложением с присвоением (+=) и запись будет короче:

let a = 1;
// a = a + 1;
a += 1;
console.log(a); // 2
С помощью подобной конструкции мы можем не только складывать, но и:

вычитать (-=)
умножать (*=)
делить (/=)
возводить в степень (**=)
находить остаток от деления (%=)
Инкремент / декремент

Также операции сложения и вычитания мы можем записать еще короче, используя инкремент и декремент. Такие конструкции позволяют максимально короткой записью прибавить / вычесть единицу в переменную: 

let a = 1;
// a = a + 1;
// a += 1;

// Инкремент
a++; // Прибавили 1
// Также можно записать слева (и инкремент и декремент)
++a; // Еще прибавили 1

// Декремент
a--; // Вычли 1

console.log(a); // 2
Между a++ и ++a есть небольшая разница: 

a++ возвращает значение a до увеличения на 1
++a возвращает значение a после увеличения на 1
let a = 0;
console.log(a++); // 0 (переменная увеличилась, но выражение вернуло старое значение)
console.log(++a); // 2 (переменная увеличилась, и выражение вернуло новое значение)
console.log(a); // 2
Аналогично с декрементом.

Операторы сравнения

Благодаря операторам сравнения мы сможем узнать, больше ли одна сущность, чем другая, или меньше, равна ли она ей и тд. В JavaScript существуют следующие операторы:

> (больше)
console.log(10 > 5) // true
console.log(1 > 5) // false
console.log(5 > 5) // false
>= (больше или равно ≥)
console.log(10 >= 5) // true
console.log(1 >= 5) // false
console.log(5 >= 5) // true
< (меньше)
console.log(10 < 5) // false
console.log(1 < 5) // true
console.log(5 < 5) // false
<= (меньше или равно ≤)
console.log(10 <= 5) // false
console.log(1 <= 5) // true
console.log(5 <= 5) // true
== (нестрогое сравнение). Сравнивает, пытаясь привести значения к одному типу
console.log(5 == 6); // false
console.log(5 == '5'); // true
console.log(5 == 5); // true
console.log(1 == true); // true
console.log(true == true); // true
console.log(false == ''); // true
console.log(null == undefined) // true
!= (неравенство). Противоположно нестрогому сравнению (==).
console.log(5 != 6); // true
console.log(5 != '5'); // false
console.log(5 != 5); // false
console.log(1 != true); // false
console.log(true != true); // false
console.log(false != ''); // false
console.log(null != undefined) // false
=== (строгое сравнение). Сравнивает без приведения типов (чтобы элементы считались равными, их типы также должны совпадать).
console.log(5 === 6); // false
console.log(5 === '5'); // false
console.log(5 === 5); // true
console.log(1 === true); // false
console.log(true === true); // true
console.log(false === ''); // false
console.log(null === undefined) // false
          Таблица сравнения == и ===

!== (строгое неравенство). Противоположен строгому равенству (===).
console.log(5 !== 6); // true
console.log(5 !== '5'); // true
console.log(5 !== 5); // false
console.log(1 !== true); // true
console.log(true !== true); // false
console.log(false !== ''); // true
console.log(null !== undefined) // true
Сравнение строк

У каждого символа в строке есть свое числовое значение (от 0 до 65535). Это значение можно получить при помощи метода charCodeAt(). 

console.log('a'.charCodeAt()); // 97
console.log('A'.charCodeAt()); // 65
Также можно в обратную сторону получить символ из числа при помощи метода String.fromCharCode().

console.log(String.fromCharCode(97)) // 'a'
console.log(String.fromCharCode(65)) // 'A'
Как мы видим, хоть буквы и одинаковые, но от их регистра зависит их числовое значение. При сравнении строк JavaScript будет их сравнивать именно по этим значениям:

console.log('A' < 'a'); // true, т. к. 65 < 97
console.log('Javascript' > 'JAvascript'); // true, т. к. 'a' > 'A'
console.log('123' < '15'); // true, т. к. '2' < '5'
В последних двух примерах у нас в строках несколько символов. JavaScript будет сравнивать строки посимвольно до тех пор, пока не найдет первое отличие (в нашем случае 'a' и 'A', '2' и '5'). После этого, он сравнит 2 этих значения и выведет результат. 

Округление

В JavaScript также содержится объект Math, в котором есть множество полезных математических функций / констант. Например, мы можем получить число π:

console.log(Math.PI) // 3.141592653589793
Таких констант очень много, поэтому при необходимости их можно найти в документации. 

Но также данный объект позволяет округлять числа. Для этого у него есть методы:

Math.floor() – округление вниз
console.log(Math.floor(41.5)) // 41
console.log(Math.floor(41.9)) // 41
Math.round() – простое округление
console.log(Math.round(41.5)) // 42
console.log(Math.round(41.4)) // 41
console.log(Math.round(41.8)) // 42
console.log(Math.round(42)) // 42
Math.ceil() – округление вверх
console.log(Math.ceil(41.5)) // 42
console.log(Math.ceil(41.1)) // 42
console.log(Math.ceil(42)) // 42
Практика

Теперь давай реализуем наш мини-конвертер валют. Для примера возьмем конвертер рублей ₽ в доллары $:

const rate = 51; // Здесь указываем ваш курс USD/RUB
const amount = 100; // Здесь указываем количество рублей

const result = Number((amount / rate).toFixed(2));
console.log(`${amount}₽ = $${result}`); // 100₽ = $1.96
* Примечание. Метод toFixed() с аргументом 2 форматирует число, обрезав значение после второго символа в дробной части. То есть вместо 1.9607843137254901 будет 1.96. Также обрати внимание, что он возвращает значение с типом данных string. 

Теперь, изменяя переменные amount и rate, мы можем автоматически высчитывать количество долларов, благодаря нехитрой математической формуле. 