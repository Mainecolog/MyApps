for
while



Логические операторы также являются неотъемлемой частью языков программирования. С их помощью мы можем составлять сложные логические условия. Давай рассмотрим по порядку:

И (&&) – логическое И (a && b) 

Если все операнды (аргументы операции, в примере выше это a и b) типа Boolean, то результатом будет true, когда все операнды равны true. В остальных случаях результатом будет false. 

Или же можно представить в таком виде:


console.log(true && false && true) // false
console.log(true && true && true && true) // true
Представим, что мы делаем интернет-магазин. Для заказа необходима авторизация и возраст ≥ 18 лет. Это 2 условия, которые должны быть обязательно выполнены:

const isAuth = true; // Переменная, авторизован ли пользователь
const age = 25; // Возраст

if (isAuth && age >= 18) {
  // Попадем сюда, если все условия выполнятся
}
Если операнды не только типа Boolean, то:
         Если все значения truthy (приводятся к true), то возвращает последнее из них.

         Если хотя бы одно falsy (приведется к false), то возвращает первое из них.

// Все truthy
console.log(1 && 'hello' && true); // true
console.log(true && 1 && 'javascript'); // 'javascript'

// Содержится falsy
console.log(false && 0 && 'javascript'); // false
console.log(1 && '' && false); // ''
console.log(0 && '' && false); // 0
Данную особенность мы сможем использовать в модуле по React, когда будем реализовывать условный рендеринг (разберем в следующих уроках). 

ИЛИ (||) – логическое ИЛИ (a || b) 

Если все операнды типа Boolean, то результатом будет true, когда один или несколько операндов равны true. В остальных случаях (только когда все операнды false) результатом будет false. 

Или же можно представить в таком виде:


console.log(false || true || false); // true
console.log(false || false); // false
Представим, что мы делаем программу-фильтр для входящих звонков. Если звонит Игорь или Алексей, тогда звонок переадресовывается на наш телефон и мы ответим. В другом случае вызов сбрасывается:

const incomingName = 'Игорь';

if (incomingName === 'Игорь' || incomingName === 'Алексей') {
  // Звонок проходит дальше 
} else {
  // Сброс вызова
}
Если операнды не только типа Boolean, то:         
         Если все значения falsy (приводятся к false), то возвращает последнее из них.

         Если хотя бы одно truthy (приведется к true), то возвращает первое из них.

// Все falsy
console.log('' || 0 || false); // false
console.log(false || 0 || ''); // ''

// Содержится truthy
console.log(false || 'hello' || true); // 'hello'
console.log(1 || false || 'javascript'); // 1
console.log(true || 1 || 'javascript'); // true
Это может быть полезно, когда мы хотим установить значение по умолчанию. Пример:
const userString = prompt('Введите строку');
console.log(userString || 'default string');
В примере выше мы запрашиваем строчку от пользователя при помощи prompt(). Если пользователь ничего не введет, то в переменную userString запишется null. Но мы в таком случае хотим указать свою строку (в нашем случае это 'default string'). Для этого мы можем использовать ИЛИ (||). По сути, если в userString будет null, то наша запись будет аналогична:

console.log(null || 'default string'); // Выведется 'default string'
Так как null является falsy-значением и у нас есть хотя бы одно truthy ('default string'), оператор ИЛИ выберет последнее truthy-значение. Если мы хотим записать это в переменную userString, то это можно сразу сделать вот так:

const userString = prompt('Введите строку') || 'default string';
НЕ (!) – логическое отрицание (!a)

Оператор НЕ при работе с типом данных Boolean превращает true в false и наоборот. Если операнд будет любого другого типа данных, то, если его можно преобразовать к true, вернет false, а иначе – true. 

Примеры:

console.log(!true); // false
console.log(!false); // true
console.log(!''); // true
console.log(!0); // true
console.log(!1); // false
console.log(!'hello'); // false
Предположим, у нас есть сайт, и мы хотим сделать какие-то действия, если пользователь не авторизован. Также у нас есть переменная isAuth:

const isAuth = false; // Пользователь не авторизован

if (!isAuth) {
  // Пользователь не авторизован, условие выполнится
}
Условие сработает, так как !isAuth === true и в if будет передано true. 

Nullish coalescing (??) – оператор нулевого слияния (a ?? b)

Данный оператор очень похож на ИЛИ (||), но он считает за “falsy” только null и undefined. То есть он возвращает правый операнд, если слева был null или undefined, и возвращает левый, если их там не было. 

console.log(null ?? '123') // '123'
console.log(undefined ?? '123') // '123'
console.log(false ?? '123') // false
console.log(0 ?? '123') // 0
console.log(true ?? '123') // true
Используя оператор ИЛИ (||) для установки значения по умолчанию, нам иногда не нужно исключать все falsy-значения (например 0, false, "", NaN и т. д.), это вполне нормальные значения, которые мы тоже можем захотеть использовать. Чтобы их не игнорировать, нам нужно было добавлять дополнительные проверки:

const number = 0;
console.log(number || 'Числа нет'); 
// Вывод: 'Числа нет' (хотя 0 это число)

// Нужна дополнительная проверка:
console.log(number || number  === 0 ? number : 'Числа нет'); // Вывод: 0

// Или проще:
console.log(number ?? 'Числа нет'); // Вывод 0
Таким образом, оператор нулевого слияния может упростить нам жизнь.

