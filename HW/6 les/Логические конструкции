Использование в коде:

if (условие) {
  // Выполнится, если условие будет истинным
}
Пример:

const number = 5;

// Передаем выражение
if (number < 10) {
  // Выполнится, так как 5 < 10 === true
  console.log(`Число ${number} меньше 10!`);
}

const string = '';
if (string.length > 0) {
  // Не выполнится
  console.log('Строка содержит текст!');
}
Второй console.log() не сработал, так как выражение в круглых скобках вернуло false. Также последний пример можно записать немного по-другому:

const string = '';
if (string.length) {
  // Не выполнится
  console.log('Строка содержит текст!');
}
Это будет работать, так как в if также работает механизм преобразований типов. Выражение, переданное в if , JavaScript попытается преобразовать в тип boolean. string.length вернуло значение 0, а оно, как мы помним из прошлых уроков, приведется к false и условие не выполнится.

console.log(Boolean(0)); // false

const string = '';
console.log(string.length); // 0
console.log(Boolean(string.length)); // false
if...else – более расширенная запись предыдущей конструкции. В блоке else можем указывать код, который должен выполниться, если условие не сработает (выражение вернет false или falsy-значение).

Использование в коде:

if (условие) {
  // ...
} else {
  // Выполнится, если условие будет ложным
}
Пример:

const condition = 5 > 10; // вернет false
if (condition) {
  console.log('Выражение истино!');
} else {
  console.log('Выражение ложно!');
}
// Вывод: Выражение ложно!

const string = '';
if (string.length) {
  console.log('Строка содержит текст!');
} else {
  console.log('Строка пустая!');	
}
// Вывод: Строка пустая!
else if – дополнительная проверка условия
if (условие1) {
  // ...
} else if (условие2) {
  // Выполнится, если условие 2 было истинным, и условие 1 были ложным
} else if (условие3) {
  // Выполнится, если условие 3 было истинным, и условия 1, 2 были ложными
} else {
  // Выполнится, если все условия выше были ложными
}
Пример:

const status = 'online';
if (status === 'online') {
  console.log('Ваш статус: в сети');
} else if (status === 'offline') {
  console.log('Ваш статус: не в сети');
} else {
  console.log('Ошибка! Неизвестный статус!');
}
// Вывод: Ваш статус: в сети
switch - сравнивает выражение со случаями (кейсами), находит тот, значение которого совпадает с выражением, и затем выполняет инструкции нужного случая. 

Использование в коде:

switch (переменная) {
  case значение1:
    // выполнится, если переменная === значение1
    break // завершение случая
  case значение2:
    // выполнится, если переменная === значение2
    break
  default:
    // выполнится, если ни один другой случай не сработал
    break
}
В круглых скобках после switch указывается переменная / значение, которое будем сравнивать. Ниже указываем случаи при помощи ключевого слова case. Если переменная / значение после switch будет равна значению из case, то он выполнится. Если ни один case, не выполнится, то выполнится default. 

Примечание: случай по умолчанию (default) указывать не обязательно.

// Пример без default
switch (переменная) {
  case значение1:
    // выполнится, если переменная === значение1
    break // завершение случая
  case значение2:
    // выполнится, если переменная === значение2
    break
}
Пример использования:

const status = 'online';
switch (status) {
  case 'online':
    console.log('Ваш статус: в сети');
    break;
  case 'offline':
    console.log('Ваш статус: не в сети');
    break;
  default:
    console.log('Ошибка! Неизвестный статус!');
    break;
}
// Вывод: Ваш статус: в сети
Как ты мог заметить, пример из предыдущего пункта по else if , мы также можем сделать при помощи switch. Подобные задачи мы можем решать обоими способами. switch может быть полезен тем, что нам не нужно в каждом else if дублировать проверку status === '...', мы просто указываем значение, с которым нужно сравниться. 

Терна́рный оператор – компактная замена if...else

Использование в коде:

условие ? выражение1 : выражение2
Если условие истинно, то вернется выражение1, а если ложно, то выражение2. Примеры:

const num = 7;
console.log(num === 7 ? 'Число 7' : 'Число не 7'); // 'Число 7'
console.log(num === 10 ? 'Число 10' : 'Число не 10'); // 'Число не 10'

// Запись в переменную
const text = num > 42 ? 'Число больше 42' : 'Число меньше 42';
console.log(text); // 'Число меньше 42'
Как ты можешь заметить, тернарный оператор по логике похож на if...else. Это действительно так, но благодаря данному оператору, мы можем писать меньше кода и записывать результат сразу в переменную. 

Данные логические конструкции – самые основы программирования, причем не только для языка JavaScript. Важно с ними разобраться, так как мы довольно часто будем их использовать.