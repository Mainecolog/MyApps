
В этом уроке мы познакомимся с функциями в JavaScript и разберем различные способы их объявления. Также рассмотрим важную тему областей видимости переменных и узнаем, что такое замыкания.

Предназначение функций

В предыдущих уроках мы уже пользовались встроенными функциями. По сути, функции — это набор неких действий, «упакованных» под одним названием.


const tax = 0.2;

const price1 = 100;
const count1 = 5;
const totalPrice1 = price1 * count1 * (1 + tax); // Вычисляем итоговую цену

const price2 = 350;
const count2 = 2;
const totalPrice2 = price2 * count2 * (1 + tax); // Повторяем вычисления опять

// И так далее...
Вроде бы всё хорошо, но код вычисления итоговой стоимости повторяется для каждого товара. Если товаров много, то код получится длинный и запутанный. А если вдруг изменится алгоритм вычисления — например, нужно будет учесть персональную скидку? Тогда придется менять код вычислений для каждого товара отдельно. И хорошо, если этих товаров два, но если их десятки или сотни? Вот тут-то и придут на помощь функции.

Функции — это удобный способ организации кода. Они помогают:

Избавиться от необходимости писать один и тот же код повторно.
Если нужно изменить что-то в коде, то он меняется в одном месте.
Структура кода становится более четкой.
Представь себе шкаф для хранения, в котором все вещи сложены в кучу. Это программа без функций. Функции позволяют разложить код “по полочкам”.

Объявление функции

Синтаксис объявления простой функции выглядит так:

function doSomething() {
  // Код функции
}
Как видно, в объявлении есть следующие части:

ключевое слово function
название функции
круглые скобки (далее мы рассмотрим, что внутри них можно передавать аргументы)
тело функции в фигурных скобках
Пример:

function sayHello() {
  alert("Hello world!");
}
Данный синтаксис объявления функции так и называется — Function Declaration (объявление функции). Чуть дальше мы рассмотрим и другие способы создания функций.

Функция с параметрами

Функции могут иметь параметры, которые позволяют передавать значения в функцию. Рассмотрим эту возможность на примере функции, которая подсчитывает и выводит в консоль сумму товаров:

function showTotalPrice(price, count) {
  const totalPrice = price * count; // Используем параметры в вычислениях
  console.log(totalPrice);
}
Данная функция имеет два параметра — цена (price) и количество (count). По сути это переменные, которым присваиваются значения при вызове функции.

Мы можем вызвать эту функцию по имени, передав нужные значения в качестве аргументов. Порядок аргументов должен быть такой, как в объявлении функции:

function showTotalPrice(price, count) {
  console.log(price * count);
}

showTotalPrice(100, 5); // Выведет в консоль: 500
showTotalPrice(350, 2); // Выведет в консоль: 700
Обрати внимание на разницу между параметрами и аргументами. На практике зачастую эти слова взаимозаменяемы, но стоит понимать отличия:

Параметр — это название переменной, которое указывается в объявлении функции.
Аргумент — это значение параметра, которое передается при вызове функции.
То есть в примере выше мы вызвали функцию showTotalPrice с аргументами 100 и 5.

Возврат значения из функции

Зачастую нужно, чтобы функция не просто выполняла какое-то действие, но и возвращала значение. 

Делается это с помощью ключевого слова return:

function getTotalPrice(price, count) {
  const tax = 0.2;
  return price * count * (1 + tax); // Возвращаем результат
}

const totalPrice1 = getTotalPrice(100, 5); // Запишет: 600
const totalPrice2 = getTotalPrice(350, 2); // Запишет: 840
Данная функция вычисляет суммарную стоимость товара с учетом его количества и налога (сравни с кодом в начале статьи). Теперь мы можем не просто вывести результат вычислений в консоль, но и поместить его в переменную.

Обрати внимание, что если поместить любой код после return, он не будет выполнен.

Callback — передача функции в качестве параметра

JavaScript позволяет передать в функцию в качестве параметра переменную любого типа — число, строку, объект и т.д. Но кроме этого, можно передать также и другую функцию. Такая функция, которая передается в качестве параметра в другую, называется функцией обратного вызова или коллбэком (callback).

Модифицируем функцию showTotalPrice() из предыдущего примера, чтобы можно было настраивать способ вывода информации:

function getTotalPrice(price, count) {
  const tax = 0.2;
  return price * count * (1 + tax);
}

function showTotalPrice(price, count, showMethod) {
  showMethod(getTotalPrice(price, count));
}
Здесь мы добавили третий параметр showMethod для передачи коллбэка. Далее вместо вывода в консоль мы вызываем функцию showMethod с параметром totalPrice. То есть, по сути, мы заранее не знаем, какая функция реально будет вызвана — это зависит от того, какой именно будет указан последний аргумент при вызове showTotalPrice.

Вызовем функцию и передадим в неё поочередно функции alert и console.log в качестве аргументов:

showTotalPrice(100, 5, alert); // Выведет диалоговое окно с ценой
showTotalPrice(100, 5, console.log); // Выведет цену в консоль
Таким образом, наша функция стала ещё более гибкой. Обрати внимание, что функции при передаче пишутся без скобок! Если передать функцию со скобками, то вместо самой функции будет передан результат её вычисления.

Помимо стандартных встроенных функций, аналогичным образом можно передать любую функцию, написанную самостоятельно.

Анонимные функции

Анонимная функция — это функция без имени, как следует из названия. Такие функции удобно, например, передавать в качестве коллбэка, когда нет необходимости иметь отдельное название для функции, т.к. она используется только один раз.

В качестве иллюстрации, вызовем функцию showTotalPrice из предыдущего примера и передадим в неё анонимную функцию:

showTotalPrice(100, 5, function(price) {
  alert(`Итоговая цена: ${price}`);
});
Этот код аналогичен следующему, где мы объявили отдельную функцию для коллбэка:

function showPriceWithText(price) {
  alert(`Итоговая цена: ${price}`);
}

showPrice(100, 5, showPriceWithText);
Анонимные функции позволяют делать код более компактным и избежать его засорения функциями, которые не используются в других местах.

