// // GetTime - Разница дат
// const date1 = new Date(2005, 4, 20);
// const date2 = new Date(2006, 4, 10);

// // Количество мс с 1 янв 1970
// console.log(`date1`, date1.getTime());
// console.log(`date2`, date2.getTime());
// // Разница будет в миллисекундах!! ЧТобы перевести нужно разделить на 1000 и на 60 - получатся минуты
// const difference = date2.getTime() - date1.getTime();
// console.log(`difference in minutes`,difference/1000/60);

// Скорость выполнения функции/алгоритма:
// const steartTime = new Date().getTime();

// Время начала выполнения операции (до алгоритма)
const steartTime = Date.now();

for (let i = 0; i < 100000000; i += 1)
{ 
    // do stmth
}

// Время окончания выполнения опрации (после операции)
const endTime = Date.now();

console.log(`steartTime`,steartTime);
console.log(`endTime`,endTime);

// Скорость выполнения операции
const difference = endTime - steartTime;
console.log(`difference`,difference);

// Теория из курса:
// В JavaScript есть возможность работать с датами и временем. Мы можем их создавать, выполнять вычисления или хранить. В данном уроке мы разберемся, как это делать и для чего это нужно.

// Класс Date

// Для создания даты достаточно использовать конструктор new Date().

// Давай посмотрим, как это выглядит:

// const now = new Date();
// console.log('now:', now);

// // Пример вывода:
// // now: Thu Feb 11 2001 19:59:54 GMT...
// Таким образом, мы получили текущий день недели, месяц, число, год, время и часовой пояс. То есть конструктор new Date() без параметров возвращает текущие дату и время.

// Для чего вообще это может понадобиться? Например, у нас есть соц. сеть и нам нужно сохранять дату создания аккаунта пользователя. Чтобы её получить, мы можем воспользоваться new Date() в момент создания аккаунта и сохранить ее.

// Входные параметры конструктора Date

// Помимо создания текущей даты, мы можем создать любую другую дату, которая нам необходима. Для этого нам нужно лишь передать параметры в Date. Существует несколько способов. Давай рассмотрим основные:

// Создание даты через timestamp

// new Date() может принимать в себя число - количество миллисекунд, прошедших с 1 января 1970 года. Это общепринятая дата, используемая во многих языках программирования как точка отсчета.

// const date = new Date(628021800000);
// console.log(date); // Sun Nov 26 1989 01:30:00 GMT...
// Создание даты из строки

// Также new Date() может принимать в себя строку с датой:

// const date = new Date('December 17, 2006 03:24:00');
// console.log(date); // Thu Dec 17 2006 03:24:00 GMT...
// Это будет работать, если в конструктор был передан единственный аргумент с типом данных string. Данный пример будет аналогичен:

// const date = new Date(Date.parse('December 17, 2006 03:24:00'));
// console.log(date); // Thu Dec 17 2006 03:24:00 GMT...
// Метод Date.parse() анализирует строку на наличие даты и переводит её в миллисекунды:

// console.log(Date.parse('December 17, 2006 03:24:00')); // 1166307840000
// Затем new Date() переводит эти миллисекунды в объект даты. 

// Результат будет аналогичный, но при передаче строки прямо в конструктор запись получится более короткая и удобная (если вам нужно получить именно объект даты).

// Создание даты через разные аргументы

// Также можно передать дату сразу несколькими аргументами:

// const date = new Date(year, month, date, hours, minutes, seconds, ms);
// В данном случае Date принимает в себя: год, месяц, день, часы, минуты, секунды и миллисекунды.

// Также стоит отметить, что в JavaScript месяцы нумеруются от 0 до 11. То есть январь - это число 0, а декабрь - это 11.

// Попробуем передать в new Date() свои значения:

// const date = new Date(2002, 5, 18, 12, 55, 10, 2000);
// console.log(date); // Tue Jun 18 2002 12:55:12 GMT...
// Итак, мы передали в Date() следующие значения:

// 2002 – 2002-ой год
// 5 – месяц июнь (не забываем, что отсчет начинается с 0)
// 18 – 18-е число
// 12 – 12 часов
// 55 – 55 минут
// 10 – 10 секунд
// 2000 – 2000 миллисекунд
// И получили соответствующий результат. Обрати внимание, что секунды и миллисекунды, которые мы передали, суммировались, и в результате получилось 12 секунд.

// Извлечение даты: getFullYear(), getMonth(), getDate()

// Для извлечения даты существуют следующие методы: 

// Метод getFullYear() – получение года
// Метод getMonth() – получение месяца
// Метод getDate() – получение числа месяца
// Давай посмотрим, как это выглядит:

// const date = new Date('February 11, 2002 23:15:30');
// console.log('year:', date.getFullYear()); // year: 2002
// console.log('month:', date.getMonth()); // month: 1
// console.log('day:', date.getDate()); // day: 11
// В данном примере мы создали дату и извлекли нужные нам значения. 

// Через getFullYear() получили год – 2002, через getMonth() получили месяц – февраль (в JavaScript это 1), через getDate() получили число месяца – 11.

// Извлечение времени: getHours(), getMinutes(), getSeconds(), getMilliseconds()

// Таким же образом мы можем извлечь информацию о времени. Для этого существуют следующие методы:

// Метод getHours() – получение часов
// Метод getMinutes() – получение минут
// Метод getSeconds() – получение секунд
// Метод getMilliseconds() – получение миллисекунд
// Посмотрим, как это выглядит на практике:

// const date = new Date('February 11, 2002 23:15:30');
// console.log('hours:', date.getHours()); // hours: 23
// console.log('minutes:', date.getMinutes()); // minutes: 15
// console.log('seconds:', date.getSeconds()); // seconds: 30
// console.log('milliseconds:', date.getMilliseconds()); // milliseconds: 0
// В итоге мы получили текущие значения часов, минут, секунд и миллисекунд.

// Получение дня недели: getDay()

// Также мы можем получить и день недели с помощью метода getDay(). Дни недели в JavaScript считаются с 0 до 6, где 0 – это воскресенье, а 6 – это суббота. То есть первый день недели – это воскресенье. Это связано с тем, что в США (а именно там был создан JavaScript) неделя начинается с воскресенья.


// Посмотрим, как это выглядит на практике:

// const date = new Date('February 11, 2002 23:15:30');
// console.log('day of week:', date.getDay()); // day of week: 1
// Итак, мы получили номер дня недели. 11-е число февраля – это понедельник. Соответственно, если считать дни недели как в JavaScript, то мы получим, что понедельник находится под номером 1. 

// Изменение даты: setFullYear(), setMonth(), setDate()

// Теперь давай научимся изменять дату. Для этого существуют методы:

// Метод setFullYear() – изменение года
// Метод setMonth() – изменение месяца
// Метод setDate() – изменение дня месяца
// Давай попробуем это сделать:

// const date = new Date('February 11, 2002 23:15:30');
// date.setFullYear(2010);
// date.setMonth(3);
// date.setDate(20);
// console.log('updated date:', date);
// // updated date: Tue Apr 20 2010 23:15:30 GMT...
// Как можно заметить, текущая дата изменилась на 20 апреля 2010 года.

// Изменение времени: setHours(), setMinutes(), setSeconds(), setMilliseconds()

// Таким же образом можно изменять и время. Сделать это можно с помощью методов:

// Метод setHours() – изменение часов
// Метод setMinutes() – изменение минут
// Метод setSeconds() – изменение секунд
// Метод setMilliseconds() – изменение миллисекунд
// Попробуем это сделать:

// const date = new Date('February 11, 2002 23:15:30');
// date.setHours(12);
// date.setMinutes(20);
// date.setSeconds(30);
// date.setMilliseconds(10000);
// console.log('updated date:', date); 
// // updated date: Mon Feb 11 2002 12:20:40 GMT...
// Итак, мы изменили время и получили 12 часов, 20 минут и 40 секунд (30 секунд + 10000 миллисекунд).

// Расчет разности между датами: getTime()

// Для того чтобы посчитать разницу между датами, используется метод getTime(). Он переводит данную ему дату в количество миллисекунд, прошедших с 1 января 1970 года.

// Давай посмотрим, как можно посчитать разницу между датами:

// const date1 = new Date('February 11, 2002');
// console.log('date1:', date1.getTime()); // date1: 1013367600000

// const date2 = new Date('June 24, 2005');
// console.log('date2:', date2.getTime()); // date2: 1119549600000

// const difference = date2.getTime() - date1.getTime();
// console.log('difference:', difference); // difference: 106182000000
// Итак, давай разберем, что мы сделали в данном примере:

// Мы создали дату date1 - 11 февраля 2002 года и вывели ее в миллисекундах.
// Создали дату date2 - 24 июня 2005 года и также вывели ее в миллисекундах.
// Создали переменную difference, посчитали в ней разность дат в миллисекундах и также вывели ее. В итоге мы получили такое значение: 106182000000.
// Но что, если мы хотим получить значение не в миллисекундах, а, например, в днях? Давай посмотрим на этом же примере, как можно получить желаемый результат:

// const date1 = new Date('February 11, 2002');
// console.log('date1:', date1.getTime()); // date1: 1013367600000

// const date2 = new Date('June 24, 2005');
// console.log('date2:', date2.getTime()); // date2: 1119549600000

// const difference = date2.getTime() - date1.getTime();
// console.log('difference:', difference  / 1000 / 60 / 60 / 24); 
// // difference: 1228.9583333333333
// Что мы сделали:

// Мы разделили полученное значение в difference на 1000. Таким образом, мы переводим миллисекунды в секунды.
// Далее, для того чтобы перевести секунды в минуты, нам нужно разделить значение на 60. Так как в одной минуте 60 секунд.
// Если нам нужно перевести в часы, то необходимо разделить еще на 60. Так как в одном часу 60 минут.
// А если нужно перевести в дни, тогда необходимо разделить значение на 24, поскольку в сутках 24 часа.
// В итоге мы получили не целое число. Если же нам нужно целое, то мы можем округлить его с помощью Math.round():

// const date1 = new Date('February 11, 2002');
// console.log('date1:', date1.getTime()); // date1: 1013367600000

// const date2 = new Date('June 24, 2005');
// console.log('date2:', date2.getTime()); // date2: 1119549600000

// const difference = date2.getTime() - date1.getTime();
// console.log('diff:', Math.round(difference / 1000 / 60 / 60 / 24)); 
// // diff: 1229
// Также, если нам нужно будет получить текущее время в миллисекундах, мы можем использовать Date.now() вместо new Date().getTime():

// console.log('new Date().getTime() =', new Date().getTime()); 
// // new Date().getTime() = 981831600000

// console.log('Date.now() =', Date.now()); 
// // Date.now() = 981831600000
// Результаты работы будут идентичными.

// Вычисление скорости выполнения кода

// Объект даты можно использовать для того, чтобы посчитать время выполнения какого-либо кода. Давай попробуем посчитать время выполнения цикла for:

// const startTime = Date.now();

// for (let i = 0; i < 1000000; i++) {
//   // do something
// };

// const endTime = Date.now();

// console.log('startTime:', startTime); // startTime:  981831600000
// console.log('endTime:', endTime); // endTime:  981831600009

// const difference = endTime - startTime;
// console.log('difference:', difference); // difference:  9
// Итак, разберем данный код:

// Мы создали переменную startTime с временем перед началом цикла.
// Создали цикл с переменной i со значениями от 0 до 1000000.
// Создали переменную endTime с временем после завершения работы цикла.
// Создали переменную difference и посчитали в ней разность наших переменных.
// По итогу мы узнали, что наш цикл выполнился за 9 миллисекунд.

// Вывод

// В данном уроке мы познакомились с работой с датами в JavaScript. Узнали, как создать текущую дату или любую другую, как извлекать значения даты / времени и как их изменять. Научились считать разницу между датами и использовать объект даты для вычисления времени работы участка кода.