Со строками мы уже знакомы. Мы научились их создавать, научились преобразовывать их в другие типы данных, а также и преобразовывать другие типы данных в строки.
Давай посмотрим, какие еще можно производить операции над ними.
Создание строк
Есть несколько способов объявления строк:
В одинарных кавычках '':
const string = 'JavaScript';
В двойных кавычках"":
const string = "JavaScript";
Данный способ ничем, кроме кавычек, не отличается от предыдущего. Используй тот, который больше нравится.
В обратных кавычках ``:
const string = `JavaScript`;
Обратные кавычки имеют свою особенность, о которой мы поговорим далее.
Объединение нескольких строк в одну
Склеить строки можно двумя способами:
Просто сложить их:
const string1 = 'Java';
const string2 = 'Script';
console.log(string1 + string2);
Получится такая строка, склеенная из двух:
Если нужно добавить пробел между строками, можно написать так:
const string1 = 'Java';
const string2 = 'Script';
console.log(string1 + ' ' + string2);
Тогда выведется строка с пробелом:
Можно воспользоваться шаблонными строками (или шаблонные литералы).
Как раз в этом случае нам понадобятся обратные кавычки - только с ними можно использовать шаблонные литералы.
Что же это такое? Это строки, внутри которых можно использовать переменные или писать какие-нибудь JavaScript-выражения (например, 1 + 2).
Для этого внутри обратных кавычек нужно воспользоваться такой записью: ${} и в фигурных скобках прописать нашу переменную или выражение.
Давай посмотрим, как это выглядит:

const a = 'Hello';
const b = 'World';
console.log(`${a} ${b}!`); // Выведет строку: 'Hello World!'

const c = 123;
console.log(`${c}45`); // Выведет строку: '12345'
console.log(`${c + 2}`); // Выведет строку: '125'

Таким образом, мы смогли:

Объединить две строки в одну.
Использовать числовую переменную прямо в строке.
Посчитать выражение прямо в строке и вывести результат также в виде строки.
Получение длины строки

Чтобы получить длину строки, а именно количество символов, которое в ней содержится, нужно воспользоваться свойством length. Его очень просто запомнить: length в переводе с английского означает “длина”.

Посмотрим, как это выглядит на практике:

const string = 'JavaScript';
console.log(string.length);

console.log('Hello World!'.length)

Свойство length возвращает количество символов в данной строке. Будь то буква, число, пробел или знаки препинания.

Получение определенного символа из строки

Каждый из нас видел в магазинах ячейки хранения для вещей покупателя. И, как всем известно, у каждой ячейки есть собственный номер. Представь, что строка - это шкаф с ячейками. А каждый символ строки – это отдельная ячейка, у которой есть собственный номер или, правильнее сказать, индекс.


Единственное отличие - это то, что в JavaScript нумерация начинается с нуля (0, 1, 2, 3…), а не с единицы.


Следовательно, чтобы получить конкретный символ строки:

Необходимо обратиться к строке (или к переменной, в которой содержится строка).
Написать квадратные скобки (без пробелов): [].
Передать в квадратные скобки индекс нужного нам символа.
Давай посмотрим, как это выглядит на практике:

const string = 'JavaScript';
console.log(string[0]);

По индексу 0 находится символ “J”.

Смена регистра

Для того чтобы задать строке верхний регистр, существует метод toUpperCase().
Суть его работы заключается в том, чтобы сделать все буквы нашей строки заглавными:

const upperString = 'upper text';
console.log(upperString.toUpperCase());

Как можно увидеть, в консоль вывелась преобразованная строка в верхнем регистре.

И существует метод toLowerCase(). Он делает обратное – задает буквам нашей строки нижний регистр, то есть делает их строчными:
const lowerString = 'LOWER TEXT';
console.log(lowerString.toLowerCase());

Код сработал успешно. Регистр строки сменился на нижний.

В примерах выше при использовании методов для наглядности мы сразу вывели их в консоль. Также мы можем получить результат выполнения метода в переменную, для этого необходимо написать:

const string1 = 'LOWER TEXT';
// Присваиваем результат выполнения метода в переменную
const lowerString = string1.toLowerCase();
// В переменной lowerString содержится "lower text"
console.log(lowerString); // lower text

const string2 = 'upper text';
const upperString = string2.toUpperCase();
// В переменной upperString содержится "UPPER TEXT"
console.log(upperString); // upper text
Таким образом мы можем поступать со всеми методами, которые возвращают какой-то результат. 

Поиск символов в строке

Для того чтобы узнать индекс нужной нам строки или символа, используется метод indexOf(). Данный метод принимает в себя строку или символ, который нужно найти и возвращает принадлежащий ему индекс в строке.
Давай посмотрим, как это выглядит:

const string = 'JavaScript';
console.log(string.indexOf('a'));

Как можно заметить, indexOf() ищет в строке первое вхождение символа.

То есть, если нам нужно будет найти, например, символ 'a', он вернет индекс первого найденного символа и завершит поиск. В нашем случае, это индекс 1.

Для того чтобы узнать, есть ли в тексте та или иная строка или символ, существует метод includes(). Он принимает в себя символ или строку, которую нужно найти и, если символ или строка присутствуют, то он вернет значение true, иначе – false.
Посмотрим, как это выглядит на практике:

const string = 'JavaScript';
console.log(string.includes('Script'));
console.log(string.includes('java'));

В первой строке вывелось значение true, так как подстрока 'Script' присутствует в тексте.

А во второй строке вывелось значение false, поскольку подстрока 'java' не была найдена. В строке есть 'Java', но мы ищем с маленькой буквой 'j'

Обрезка строки

Для обрезки строки существуют методы slice() и substring(). Они извлекают нужную нам часть строки.

Оба метода принимают в себя два параметра: 

Индекс символа, с которого нужно начать извлечение
Индекс символа, до которого нужно закончить извлечени
Результат работы данных методов, при одинаковых параметрах и одинаковых строках, чаще всего будет идентичен. Поэтому можешь использовать тот, который больше нравится. Об отличиях ты можешь узнать здесь: ссылка

Давай посмотрим на них в действии:

const string1 = 'Hello World! It is JavaScript coding';
console.log(string1.slice(6, 11));
console.log(string1.substring(6, 11));

Оба метода извлекли строку, начиная с символа по индексу 6 до символа с индексом 11, не включая его.

Замена символов в строке

Для замены символа или строки в тексте есть метод replace().

Он принимает в себя два параметра: 

Строку, которую нужно удалить
Строку, на которую нужно заменить удаленное значение
Посмотрим, как это выглядит:

const string = 'JavaScript';
console.log(string.replace('Script', ''));

В данном примере мы, удалив 'Script', изменили строку 'JavaScript' на строку 'Java'

Давай рассмотрим второй пример:

const string = 'JavaScript';
console.log(string.replace('a', 'A'));

В данном случае метод replace() взял первую найденную 'a', заменил ее на заглавную 'A' и закончил работу.

Но что делать, если мы хотим заменить все маленькие буквы 'a' на заглавные? Для этого существует следующий метод.

Метод replaceAll() принимает в себя те же параметры, что и предыдущий. Главное их отличие в том, что replaceAll() находит все необходимые символы или строки и заменяет их.
Проверим его работу:

const string = 'JavaScript';
console.log(string.replaceAll('a', 'A'));

Код сработал успешно. Данный метод нашел все маленькие буквы 'a' и заменил их на заглавные.

Давай посмотрим еще на один пример:

const string = 'StringStringString';
console.log(string.replaceAll('String', 'JavaScript'));

Как можно увидеть, replaceAll() нашел все строки 'String' и заменил их на строку 'JavaScript'.

Повторение строки несколько раз

Для того чтобы продублировать строку нужное количество раз, есть метод repeat().

Он принимает в себя всего один параметр - число, указывающее сколько раз нужно продублировать строку.

Посмотрим на данный пример:

const string = 'Hello!';
console.log(string.repeat(3));

Он принимает в себя всего один параметр - число, указывающее сколько раз нужно продублировать строку.

Удаление лишних пробелов

Для того чтобы удалить лишние пробелы, используется метод trim(). Он удаляет лишние пробелы в начале и в конце строки. При этом пробелы между словами он не трогает:

const string1 = '   Hello!   ';
console.log(string1.trim());

const string2 = 'Hello my  name   is    Ivan';
console.log(string2.trim());
В результате вернется строка без лишних пробелов в начале и конце строки:


Вывод

Итак, в данном уроке мы научились работать со строками: создавать их, склеивать, изменять, обрезать. Узнали, что такое шаблонные строки и индекс. Обязательно попробуй выполнить эти действия на практике, чтобы закрепить полученный материал.

